================================================
asm
================================================

void f() {
  asm("bsfl %1,%0"
    : "=r" (dwRes)
    : [aaa] "r" (dwSomeValue)
    : "=r" (dwRes));
}

---

(translation_unit
  (function_definition
    (primitive_type)
    (function_declarator
      (identifier)
      (parameter_list))
    (compound_statement
      (expression_statement
        (inline_asm_expression
          (string_literal)
          (inline_asm_operand
            (string_literal)
            (identifier))
          (inline_asm_operand
            (identifier)
            (string_literal)
            (identifier))
          (inline_asm_operand
            (string_literal)
            (identifier)))))))

================================================
asm1
================================================

asm ("bsfl %1,%0"
  : "=r" (dwRes)
  : "r" (dwSomeValue)
  : "cc");

---

(translation_unit
  (expression_statement
    (inline_asm_expression
      (string_literal)
      (inline_asm_operand
        (string_literal)
        (identifier))
      (inline_asm_operand
        (string_literal)
        (identifier))
      (inline_asm_operand
        (string_literal)))))

================================================
asm2
================================================

asm("bsfl %1,%0"
  : "=r");

---

(translation_unit
  (expression_statement
    (inline_asm_expression
      (string_literal)
      (inline_asm_operand
        (string_literal)))))

================================================
asm comma sep operands
================================================

asm(
  "vpmaddwd    %[tmp0], %[ones], %[tmp0]\n\t"
  "vpmaddwd    %[tmp1], %[ones], %[tmp1]\n\t"
  "vpaddd      %[tmp0], %[tmp1], %[tmp0]\n\t"
  "vpaddd      %[acc], %[tmp0], %[acc]\n\t"
  : [acc]"+v"(acc), [tmp0]"+&v"(tmp0), [tmp1]"+&v"(tmp1)
  : [ones]"v"(_mm512_set1_epi16(1))
);

---

(translation_unit
  (expression_statement
    (inline_asm_expression
      (string_literal
        (escape_sequence)
        (escape_sequence))
      (string_literal
        (escape_sequence)
        (escape_sequence))
      (string_literal
        (escape_sequence)
        (escape_sequence))
      (string_literal
        (escape_sequence)
        (escape_sequence))
      (inline_asm_operand
        (identifier)
        (string_literal)
        (identifier))
      (inline_asm_operand
        (identifier)
        (string_literal)
        (identifier))
      (inline_asm_operand
        (identifier)
        (string_literal)
        (identifier))
      (inline_asm_operand
        (identifier)
        (string_literal)
        (call_expression
          (identifier)
          (argument_list
            (number_literal)))))))



const CODE_MACRO_SEMICOLON: &str = r#"

enum Color {
};
    
ENABLE_OPERATORS_ON(PieceType)
ENABLE_OPERATORS_ON(Piece)
ENABLE_OPERATORS_ON(Color)

/// Important: If the material values are changed, one must also

const Value PawnValueMidgame   = Value(0x0C6);
const Value PawnValueEndgame   = Value(0x102);
"#;